import numpy as np

# Define Input, Weights, Bias, Labels here

# TODO: TEST CONV1D WITHOUT BATCH
INPUT_1D = np.array([[[1, 3, 5, 11, 14], [2, 7, 9, 10, 13], [6, 8, 4, 12, 15]]])  # SHAPE = [batchsize=1, channel=3, inputsize=5]
TARGET_1D = np.array([[[1070, 2350]]])

W1_1D = np.array([
    [[1, 2], [5, 6], [3, 4]],
    [[5, 6], [3, 1], [2, 4]]
])  # SHAPE = [out_channel=2, in_channel=3, kernel_size=2)

B1_1D = np.array([1, 2])  # SHAPE = [out_channel=2]

OUTPUT_L1lin_1D = np.array([[[110, 143, 193, 264],
                         [ 82, 109, 186, 268]]])
OUTPUT_L1_1D = np.array([[[110, 143, 193, 264],
                       [ 82, 109, 186, 268]]])

W2_1D = np.array([
    [[1, 2], [3, 4]],
])  # SHAPE = [out_channel=1, in_channel=2, kernel_size=2)

B2_1D = np.array([1])  # SHAPE = [out_channel=1]

OUTPUT_L2lin_1D = np.array([[[1079, 2352]]])

LOSS_1D = np.array([[81, 4]])

DERIV_LOSS_1D = np.array([[[18, 4]]])

dW2_1D = np.array([[[2752, 3630],
                [2220, 3034]]])
dB2_1D = np.array([22])

GRAD_Y1_1D = np.array([[[18, 36,  4,  8],
                        [54, 72, 12, 16]]])

GRAD_Y1lin_1D =np.array([[[18, 36,  4,  8],
                        [54, 72, 12, 16]]])

GRAD_INPUT_1D = np.array([[[288, 756, 568, 168, 112,],
                           [252, 558, 344, 124,  64,],
                           [162, 540, 468, 120,  96,]]])
dW1_1D = np.array([[[234,  390,], [404,  594,], [508,  456,]],
                   [[506,  878,],[880, 1354,],[1140, 1104,]]])
dB1_1D = np.array([66, 154])


# TODO: TEST CONV1D WIT BATCH
INPUT_1D_B = np.array([
    [[1, 3, 5, 14, 11], [2, 7, 9, 10, 13], [6, 8, 4, 12, 15]],
    [[4, 6, 13, 2, 10], [3, 15, 8, 1, 12], [7, 5, 9, 14, 11]],
    [[6, 5, 15, 10, 1], [13, 3, 9, 2, 11], [14, 12, 4, 7, 8]],
])  # SHAPE = [3, 5, 3]

TARGET_1D_B = np.array([[[1070, 2400,]],
                        [[1760, 1700,]],
                        [[1740, 1500,]]])

W1_1D_B = np.array([
    [[1, 2], [5, 6], [3, 4]],
    [[5, 6], [3, 1], [2, 4]]
])  # SHAPE = [out_channel=2, in_channel=3, kernel_size=2)

B1_1D_B = np.array([1, 2])  # SHAPE = [out_channel=2]

OUTPUT_L1lin_1D_B = np.array([[[110, 143, 199, 261],
                              [ 82, 109, 204, 265]],
                             [[163, 207, 147, 186],
                              [116, 209, 178, 159]],
                             [[190, 157, 133, 142],
                              [180, 175, 202, 121]]])

OUTPUT_L1_1D_B = np.array([[[110, 143, 199, 261],
                              [ 82, 109, 204, 265]],
                             [[163, 207, 147, 186],
                              [116, 209, 178, 159]],
                             [[190, 157, 133, 142],
                              [180, 175, 202, 121]]])

W2_1D_B = np.array([
    [[1, 2], [3, 4]],
])  # SHAPE = [out_channel=1, in_channel=2, kernel_size=2)

B2_1D_B = np.array([1])  # SHAPE = [out_channel=1]

OUTPUT_L2lin_1D_B = np.array([[[1079, 2394]],
                             [[1762, 1690]],
                             [[1745, 1508]]])

LOSS_1D_B = np.array([[81, 36],
                     [4, 100],
                     [25, 64]])

DERIV_LOSS_1D_B = np.array([[[ 18, -12]],
                            [[  4, -20]],
                            [[ 10,  16]]])

dW2_1D_B = np.array([[[1332, 392],
                     [964, 124]]])
dB2_1D_B = np.array([16])

GRAD_Y1_1D_B = np.array([[[ 18,  36, -12, -24],
                          [ 54,  72, -36, -48]],
                         [[  4,   8, -20, -40],
                          [ 12,  16, -60, -80]],
                         [[ 10,  20,  16,  32],
                          [ 30,  40,  48,  64]]])

GRAD_Y1lin_1D_B = np.array([[[ 18,  36, -12, -24],
                          [ 54,  72, -36, -48]],
                         [[  4,   8, -20, -40],
                          [ 12,  16, -60, -80]],
                         [[ 10,  20,  16,  32],
                          [ 30,  40,  48,  64]]])


GRAD_INPUT_1D_B = np.array([[[288,  756,  312, -504, -336],
                              [252,  558,  120, -372, -192],
                              [162,  540,  324, -360, -288]],
                             [[64,  168, -208, -840, -560],
                              [56,  124, -216, -620, -320],
                              [36,  120,  -84, -600, -480]],
                             [[160,  420,  536,  672,  448],
                              [140,  310,  384,  496,  256],
                              [90,  300,  384,  480,  384]]])

dW1_1D_B = np.array([[[174, 32], [270, 236,], [56, -276]],
                     [[ 362, 144], [ 594, 580], [ 224, -580]]])
dB1_1D_B = np.array([48, 112])


# TODO: TEST CONV2D WITH BATCH
INPUT_2D_B = np.ones((3, 3, 5, 5))  # SHAPE = [3, 3, 5, 5]
INPUT_2D_B[1, 2, 4, 0] = 3
INPUT_2D_B[1, 2, 2, 1] = -5
INPUT_2D_B[2, 0, 3, 0] = 4
INPUT_2D_B[0, 1, 1, 4] = 5
INPUT_2D_B[0, 1, 2, 2] = -2
INPUT_2D_B[2, 1, 4, 2] = -1


TARGET_2D_B = np.array([[[[4550, 5600],
                               [4750, 4820]]],
                             [[[2950, 5020],
                               [4160, 5010]]],
                             [[[5010, 5010],
                               [5100, 4780]]]])

W1_2D_B = np.arange(24).reshape((2, 3, 2, 2))  # SHAPE = [out_channel=2, in_channel=3, kernel_size=2, kernel_size=2)

B1_2D_B = np.array([1, 2])  # SHAPE = [out_channel=2]

OUTPUT_L1lin_2D_B = np.array([[[[67, 67, 67, 95, ],
                                [67, 46, 49, 87, ],
                                [67, 52, 55, 67, ],
                                [67, 67, 67, 67, ]],

                               [[212, 212, 212, 288, ],
                                [212, 155, 158, 280, ],
                                [212, 161, 164, 212, ],
                                [212, 212, 212, 212, ]]],

                              [[[67, 67, 67, 67, ],
                                [1, 7, 67, 67, ],
                                [13, 19, 67, 67, ],
                                [87, 67, 67, 67, ]],

                               [[212, 212, 212, 212, ],
                                [74, 80, 212, 212, ],
                                [86, 92, 212, 212, ],
                                [256, 212, 212, 212, ]]],

                              [[[67, 67, 67, 67, ],
                                [67, 67, 67, 67, ],
                                [73, 67, 67, 67, ],
                                [67, 53, 55, 67, ]],

                               [[212, 212, 212, 212, ],
                                [212, 212, 212, 212, ],
                                [254, 212, 212, 212, ],
                                [248, 174, 176, 212, ]]]])


OUTPUT_L1_2D_B = np.array([[[[67, 67, 67, 95, ],
                                [67, 46, 49, 87, ],
                                [67, 52, 55, 67, ],
                                [67, 67, 67, 67, ]],

                               [[212, 212, 212, 288, ],
                                [212, 155, 158, 280, ],
                                [212, 161, 164, 212, ],
                                [212, 212, 212, 212, ]]],

                              [[[67, 67, 67, 67, ],
                                [1, 7, 67, 67, ],
                                [13, 19, 67, 67, ],
                                [87, 67, 67, 67, ]],

                               [[212, 212, 212, 212, ],
                                [74, 80, 212, 212, ],
                                [86, 92, 212, 212, ],
                                [256, 212, 212, 212, ]]],

                              [[[67, 67, 67, 67, ],
                                [67, 67, 67, 67, ],
                                [73, 67, 67, 67, ],
                                [67, 53, 55, 67, ]],

                               [[212, 212, 212, 212, ],
                                [212, 212, 212, 212, ],
                                [254, 212, 212, 212, ],
                                [248, 174, 176, 212, ]]]])


W2_2D_B = np.arange(8).reshape((1, 2, 2, 2))  # SHAPE = [out_channel=1, in_channel=2, kernel_size=2, kernel_size=2)

B2_2D_B = np.array([1])  # SHAPE = [out_channel=1]

OUTPUT_L2lin_2D_B = np.array([[[[4605, 5651, ],
                                [4797, 4875, ]]],

                              [[[3003, 5067, ],
                                [4219, 5067, ]]],

                              [[[5067, 5067, ],
                                [5143, 4827, ]]]])

LOSS_2D_B = np.array([[[3025, 2601, ],
                       [2209, 3025, ]],

                      [[2809, 2209, ],
                       [3481, 3249, ]],

                      [[3249, 3249, ],
                       [1849, 2209, ]]])

DERIV_LOSS_2D_B = np.array([[[[110, 102, ],
                              [94, 110, ]]],

                            [[[106, 94, ],
                              [118, 114, ]]],

                            [[[114, 114, ],
                              [86, 94, ]]]])

dW2_2D_B = np.array([[[[ 76976,  79934,],
                       [ 76552,  76318,]],
                    
                      [[249736, 255070,],
                       [251040, 249678,]]]])

dB2_2D_B = np.array([1256.])

GRAD_Y1_2D_B = np.array([[[[0, 110, 0, 102, ],
                           [220, 330, 204, 306, ],
                           [0, 94, 0, 110, ],
                           [188, 282, 220, 330, ]],

                          [[440, 550, 408, 510, ],
                           [660, 770, 612, 714, ],
                           [376, 470, 440, 550, ],
                           [564, 658, 660, 770, ]]],

                         [[[0, 106, 0, 94, ],
                           [212, 318, 188, 282, ],
                           [0, 118, 0, 114, ],
                           [236, 354, 228, 342, ]],

                          [[424, 530, 376, 470, ],
                           [636, 742, 564, 658, ],
                           [472, 590, 456, 570, ],
                           [708, 826, 684, 798, ]]],

                         [[[0, 114, 0, 114, ],
                           [228, 342, 228, 342, ],
                           [0, 86, 0, 94, ],
                           [172, 258, 188, 282, ]],

                          [[456, 570, 456, 570, ],
                           [684, 798, 684, 798, ],
                           [344, 430, 376, 470, ],
                           [516, 602, 564, 658, ]]]])

GRAD_Y1lin_2D_B = np.array([[[[  0, 110,   0, 102,],
                           [220, 330, 204, 306,],
                           [  0,  94,   0, 110,],
                           [188, 282, 220, 330,]],
                        
                          [[440, 550, 408, 510,],
                           [660, 770, 612, 714,],
                           [376, 470, 440, 550,],
                           [564, 658, 660, 770,]]],
                        
                        
                         [[[  0, 106,   0,  94,],
                           [212, 318, 188, 282,],
                           [  0, 118,   0, 114,],
                           [236, 354, 228, 342,]],
                        
                          [[424, 530, 376, 470,],
                           [636, 742, 564, 658,],
                           [472, 590, 456, 570,],
                           [708, 826, 684, 798,]]],
                        
                        
                         [[[  0, 114,   0, 114,],
                           [228, 342, 228, 342,],
                           [  0,  86,   0,  94,],
                           [172, 258, 188, 282,]],
                        
                          [[456, 570, 456, 570,],
                           [684, 798, 684, 798,],
                           [344, 430, 376, 470,],
                           [516, 602, 564, 658,]]]])


GRAD_INPUT_2D_B = np.array([[[[ 5280, 12320, 12156, 11424,  6732,],
                               [14080, 32560, 31976, 30192, 17544,],
                               [14192, 32528, 33000, 32720, 18888,],
                               [12032, 27824, 30248, 32560, 18920,],
                               [ 8272, 18800, 20396, 22000, 12540,]],

                              [[ 7040, 16720, 16428, 15504,  9180,],
                               [19360, 44880, 43912, 41616, 24072,],
                               [19216, 44208, 44680, 44464, 25608,],
                               [16544, 38352, 41544, 44880, 25960,],
                               [11280, 25568, 27676, 29920, 16940,]],

                              [[ 8800, 21120, 20700, 19584, 11628,],
                               [24640, 57200, 55848, 53040, 30600,],
                               [24240, 55888, 56360, 56208, 32328,],
                               [21056, 48880, 52840, 57200, 33000,],
                               [14288, 32336, 34956, 37840, 21340,]]],
                            
                            
                             [[[ 5088, 11872, 11508, 10528,  6204,],
                               [13568, 31376, 30264, 27824, 16168,],
                               [14992, 34416, 33616, 31568, 18240,],
                               [15104, 34928, 34888, 33744, 19608,],
                               [10384, 23600, 23484, 22800, 12996,]],
                            
                              [[ 6784, 16112, 15556, 14288,  8460,],
                               [18656, 43248, 41560, 38352, 22184,],
                               [20272, 46768, 45520, 42896, 24736,],
                               [20768, 48144, 47912, 46512, 26904,],
                               [14160, 32096, 31852, 31008, 17556,]],
                            
                              [[ 8480, 20352, 19604, 18048, 10716,],
                               [23744, 55120, 52856, 48880, 28200,],
                               [25552, 59120, 57424, 54224, 31232,],
                               [26432, 61360, 60936, 59280, 34200,],
                               [17936, 40592, 40220, 39216, 22116,]]],
                            
                            
                             [[[ 5472, 12768, 12996, 12768,  7524,],
                               [14592, 33744, 34200, 33744, 19608,],
                               [14160, 32432, 33216, 33328, 19200,],
                               [11008, 25456, 26824, 27824, 16168,],
                               [ 7568, 17200, 18076, 18800, 10716,]],
                            
                              [[ 7296, 17328, 17556, 17328, 10260,],
                               [20064, 46512, 46968, 46512, 26904,],
                               [19184, 44080, 44992, 45296, 26016,],
                               [15136, 35088, 36840, 38352, 22184,],
                               [10320, 23392, 24524, 25568, 14476,]],
                            
                              [[ 9120, 21888, 22116, 21888, 12996,],
                               [25536, 59280, 59736, 59280, 34200,],
                               [24208, 55728, 56768, 57264, 32832,],
                               [19264, 44720, 46856, 48880, 28200,],
                               [13072, 29584, 30972, 32336, 18236,]]]])

dW1_2D_B = np.array([[[[ 8052,  7536,],
                       [ 7536,  7536,]],
                    
                      [[ 7536,  8478,],
                       [ 6548,  6438,]],
                    
                      [[ 6828,  7536,],
                       [ 6100,  6264,]]],
                    
                     [[[29180, 27632,],
                       [28664, 27632,]],
                    
                      [[26312, 29078,],
                       [24668, 26158,]],

                      [[24092, 24800,],
                       [24596, 23816,]]]])

dB1_2D_B = np.array([7536, 27632])


# TODO: TEST CONV2D_DILATION
np.random.seed(11785)
INPUT_DILATION = np.random.normal(0, 1.0, (3, 3, 5, 5)) * 20
np.random.seed(11785)
W_DILATION = np.random.normal(0, 1.0, (1, 3, 2, 2)) * 10  # SHAPE = [1, 3, 2, 2]
B_DILATION = np.array([0])
Y1_DILATION = np.array([[[[69.30109323,  377.15213991,  -72.85645781],
                       [-168.67953626,  370.54131217,  126.31349356],
                       [-118.96041173,  -12.64063232,   50.11450193]]],
                     [[[ 205.78625174, -371.51021712,  258.75410392],
                       [ 388.10285971, -604.86961012,  191.15459048],
                       [-366.94736545,  283.12845371,  214.03165413]]],
                     [[[  39.89284915,  137.83352195,   40.3881554 ],
                       [ 218.75145025,   17.39326304, -424.81871578],
                       [-158.44570662,  301.58503616, -221.45064897]]]])

np.random.seed(11785)
DERIV_DILATION = np.random.normal(0, 1.0, (3, 1, 3, 3)) * 20  # FAKE DERIVATIVE OF LOSS FOR CONVENIENCE

dW_DILATION = np.array([[[[ -48.07592128, -488.24122721],
                       [1034.95508444,    1.58142887]],

                      [[ 585.34109537, -105.98349705],
                       [-127.46922789,   45.06835748]],

                      [[-650.38343328, 1094.14998061],
                       [-345.7703763,   949.70604216]]]])
dB_DILATION = np.array([105.82530271])

GRAD_INPUT = np.array([[[[0, 0, 0, 0, 0],
                [0, 25.1571382, 0, -12.81189236, 0],
                [0, 0, 0, 0, 0],
                [0, 68.80309253, 0, 15.46495666, 0],
                [0, 0, 0, 0, 0]],
               [[0, 0, 0, 0, 0],
                [0, -5.68492343,  0, -21.19802734, 0],
                [0, 0, 0, 0, 0],
                [0, -182.56443787, 0, -114.01298406, 0],
                [0, 0, 0, 0, 0]],

                [[0, 0, 0, 0, 0],
                 [0, 77.10669945,  0, -15.79689985, 0],
                [0, 0, 0, 0, 0],
                [0, -40.96350373, 0, 24.32204308, 0],
                [0, 0, 0, 0, 0]]],

                [[[0, 0, 0, 0, 0],
                  [0, -86.22754874,  0, -124.91058358, 0],
                 [0, 0, 0, 0, 0],
                 [0, 105.49912664,  0, -189.26388339, 0],
                [0, 0, 0, 0, 0]],

                [[0, 0, 0, 0, 0],
                 [0, -87.64456288,  0, 87.49676526, 0],
                 [0, 0, 0, 0, 0],
                [0, 94.22315532, 0, 161.11907097, 0],
                [0, 0, 0, 0, 0]],

                [[0, 0, 0, 0, 0],
                 [0, 368.05945144,  0, -13.02994013, 0],
                [0, 0, 0, 0, 0],
                [0, -151.28685177, 0, 265.69076542, 0],
                [0, 0, 0, 0, 0]]],


                [[[0, 0, 0, 0, 0],
                [0, -200.78137863,  0, -246.84186954, 0],
                 [0, 0, 0, 0, 0],
                 [0, -207.79250087,  0, -114.50243625, 0],
                [0, 0, 0, 0, 0]],

                [[0, 0, 0, 0, 0],
                [0, 370.38418055,  0, 84.50099105, 0],
                [0, 0, 0, 0, 0],
                [0, 234.62139047, 0, 136.74114728, 0],
                [0, 0, 0, 0, 0]],

                [[0, 0, 0, 0, 0],
                 [0, -12.18888407,  0, 183.93599297, 0],
                [0, 0, 0, 0, 0],
                [0, 123.6729248, 0, 247.73362692, 0],
                [0, 0, 0, 0, 0]]]])
